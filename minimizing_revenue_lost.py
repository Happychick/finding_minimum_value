# -*- coding: utf-8 -*-
"""Minimizing Revenue lost.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hfrB8RvS2tS41NXdxlJuqxf9xBHAHC0Y
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sb
import numpy as np
import psycopg2

# read dataset
pe = pd.read_csv('price_elasticity.csv')
drugs = pd.read_csv('drug_prices.csv')

# Read the price elasticity sheet
pe

drugs.loc[drugs['drug_name'] == 'Vienva']

import numpy as np

current_cash = 23
current_ins = 40
num_customers_cash = 518
num_cutomers_insurance = 1121

max_price_increase = current_ins - current_cash
# value by which we want to increment
n = 1

# Make a list of prices that increase by 1 for the range of max price increase
new_prices = np.arange(current_cash, current_ins+n, n).tolist()

# Make an empty list to record revenue changes
total_revenue_changes = []
new_cash_customers = []
revenues = []
revenue_changes_insurance = []

for p in new_prices:
  # What's the price change we are looking at
  price_change = (p-current_cash)/current_cash

  # Get the elasticty that applies to the new price
  for s in pe.index:
    if p <= pe['end_price'][s]:
       elasticity = pe['elasticity'][s]
       break
    else:
      continue

  print(p)
  print(elasticity)
  # Based on the elasticity, calculate the impact of the price increase
  # On conversion
  new_cash_customer = num_customers_cash + ((price_change * elasticity)*num_customers_cash)
  new_cash_revenue = p * new_cash_customer
  revenue_change_cash = new_cash_revenue - (current_cash * num_customers_cash)

  # And on Insurance, as insurance pays, we do not expect any change
  # in conversion
  insurance_change = current_ins - p
  revenue_change_insurance = -(insurance_change * num_cutomers_insurance)

  # Finally, the calculation that we are interested in
  total_revenue_change = revenue_change_cash + revenue_change_insurance
  total_revenue_changes.append(total_revenue_change)
  new_cash_customers.append(new_cash_customer)
  revenues.append(new_cash_revenue)
  revenue_changes_insurance.append(revenue_change_insurance)

# Make a table for the price changes
revenue_change = pd.DataFrame()

revenue_change['new_price'] = new_prices
revenue_change['current_price'] = current_cash
revenue_change['total_revenue_changes'] = total_revenue_changes
revenue_change['new_cash_customers'] = new_cash_customers
revenue_change['new_cash_revenue'] = revenues
revenue_change['revenue_change_insurance'] = revenue_changes_insurance

revenue_change = revenue_change.sort_values(by=['total_revenue_changes'], ascending=False)

# Select the best price
price_selected = revenue_change.iloc[[0]]

# Keep the max number
revenue_change
price_selected
# price_selected

new_prices
price_selected

for i in drugs.index[:3]:
  print(i)

import numpy as np

# import table with drug pricing
# Create an empty data frame for the final prices:
final_prices = pd.DataFrame(columns=['drug_name', 'new_cash_price', 'current_cash_price','current_ins_price','months','total_revenue_change'])

for i in drugs.index:
  # Get data from CSV
  drug_name = drugs['drug_name'][i]
  months = drugs['freqinmonth'][i]
  current_cash = drugs['current_cash'][i]
  current_ins = drugs['current_ins'][i]
  num_customers_cash = drugs['no_cash'][i]
  num_customers_insurance = drugs['no_ins'][i]

  # Make an empty list to record revenue changes per price
  total_revenue_changes = []

  # Determine process
  if current_ins >= current_cash:
    # value by which we want to increment
    n = 1
    # Make a list of prices that increase by 1 for the range of max price increase
    new_prices = np.arange(current_cash, current_ins+n, n).tolist()

    for p in new_prices:
      # What's the price change we are looking at
      price_change = (p-current_cash)/current_cash
      # Get the elasticty that applies to the new price
      for s in pe.index:
        if p <= pe['end_price'][s]:
          elasticity = pe['elasticity'][s]
          # Record the selected elasticity and exit
          break
        else:
          continue
      # Based on the elasticity, calculate the impact of the price increase
      # On conversion
      new_cash_customers = num_customers_cash + ((price_change * elasticity)*num_customers_cash)
      new_cash_revenue = p * new_cash_customers
      revenue_change_cash = new_cash_revenue - (current_cash * num_customers_cash)

      # And on Insurance, as insurance pays, we do not expect any change
      # in conversion
      insurance_change = current_ins - p
        # It always negative in this case
      revenue_change_insurance = -(float(insurance_change) * float(num_customers_insurance))

      # Finally, the calculation that we are interested in
      total_revenue_change = revenue_change_cash + revenue_change_insurance
      total_revenue_changes.append(total_revenue_change)

  else:
    new_insurance_price = current_cash
    revenue_change_insurance = (float(new_insurance_price)*float(num_customers_insurance))-(float(current_ins)*float(num_customers_insurance))
    #Because in this scenario, we don't change the price of cash
    revenue_change_cash = 0
    # Need to add a variable to capture that we are not changing price
    new_prices = current_cash.tolist()

    # Finally, the calculation that we are interested in
    total_revenue_change = revenue_change_cash + revenue_change_insurance
    total_revenue_changes.append(total_revenue_change)

  # Make a table for the price changes
  revenue_change = pd.DataFrame()

  revenue_change['total_revenue_change'] = total_revenue_changes
  revenue_change['drug_name'] = drug_name
  revenue_change['current_cash_price'] = current_cash
  revenue_change['current_ins_price'] = current_ins
  revenue_change['months'] = months
  revenue_change['new_cash_price'] = new_prices

  revenue_change = revenue_change.sort_values(by=['total_revenue_change'],ascending=False)

  # Select the best price
  price_selected = revenue_change.iloc[[0]]
  final_prices = pd.concat([final_prices, price_selected], axis=0)

revenue_change

final_prices
final_prices.to_csv("final_prices_cash.csv")

# Select the best price
price_selected = revenue_change.iloc[[0]]
final_prices = pd.concat([final_prices, price_selected], axis=0)

final_prices.head()
final_prices.loc[final_prices['drug_name'] == 'Vienva']

for i in drugs.index[:1]:
  # Get data from CSV
  print(i)
  drug_name = drugs['drug_name'][i]
  print(drug_name)
  months = drugs['freqinmonth'][i]
  print(months)
  current_cash = drugs['current_cash'][i]
  print(current_cash)
  current_ins = drugs['current_ins'][i]
  print(current_ins)
  num_customers_cash = drugs['no_cash'][i]
  print(num_customers_cash)
  no_ins = drugs['no_ins'][i]
  print(no_ins)

drugs['no_ins'][0]

"""# Appendix"""

# We have a string in the no_ins column
# Based on looking at this data, we can see it should be 0
drugs[drugs['no_ins'] == 'No data']

#drugs['no_ins'] = drugs.loc[drugs['no_ins'] == 'No Data', 'no_ins'] = 0

# Applying the condition
drugs['no_ins'].mask(drugs['no_ins'] == 'No data', 0, inplace=True)

# Should add checks in the function
# 1. Check that current_cash, no_cash, current_ins and no_ins are all numeric values
# 2. If there are non-numeric values, e.g. no data, replace with 0